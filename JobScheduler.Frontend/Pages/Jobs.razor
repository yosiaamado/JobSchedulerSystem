@page "/jobs"
@using JobScheduler.Frontend.Class.InternalClass
@using JobScheduler.Frontend.Components.Wrapper
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Connections</h4>
        <button class="btn btn-primary" @onclick="GoToCreateJob">+ Add</button>
    </div>


    <TableWrapper TItem="JobDto"
                  Columns='new() { "Name", "Status", "Cron" }'
                  ColumnSelectors='new() { job => job.Name, job => job.Status, job => job.Cron }'
                  ActionCallbacks="@JobActionCallbacks"
                  Data="@jobs" />

</div>

@code {
    private List<JobDto> jobs = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     jobs = await Http.GetFromJsonAsync<List<JobDto>>("api/job");
    // }

    private void GoToCreateJob()
    {
        Navigation.NavigateTo("/create-job");
    }

    private void useView(JobDto job) =>
    Navigation.NavigateTo($"/jobs/details?id={job.Id}");

    private async Task useRun(JobDto job) =>
        await Http.PostAsync($"api/job/execute/{job.Id}", null);

    private async Task useDelete(JobDto job)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete job '{job.Name}'?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/job/{job.Id}");
            jobs.Remove(job);
            StateHasChanged();
        }
    }
    private Dictionary<string, Func<JobDto, Task>> JobActionCallbacks => new()
    {
        { "View", job => { useView(job); return Task.CompletedTask; } },
        { "Run", useRun },
        { "Delete", useDelete }
    };
}
